generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String               @id @default(cuid())
  email                    String               @unique
  name                     String?
  firstName                String?              @map("firstName")
  lastName                 String?              @map("lastName")
  image                    String?
  passwordHash             String?
  emailVerified            DateTime?
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  role                     Role                 @default(CAPTAIN)
  emailVerificationExpires DateTime?
  emailVerificationToken   String?              @unique
  lockedUntil              DateTime?
  loginAttempts            Int                  @default(0)
  resetPasswordExpires     DateTime?
  resetPasswordToken       String?              @unique
  lastOtpSentAt            DateTime?
  otpAttempts              Int                  @default(0)
  otpCode                  String?
  otpExpires               DateTime?
  otpPurpose               String?
  forcePasswordReset       Boolean              @default(false)
  passwordMfaBackupCodes   String[]             @default([])
  passwordMfaEnabled       Boolean              @default(false)
  passwordMfaMethod        MfaMethod?
  passwordMfaSecret        String?
  passwordMfaVerifiedAt    DateTime?
  accounts                 Account[]
  captainProfile           CaptainProfile?
  verification             CaptainVerification?
  drafts                   CharterDraft[]
  notesAuthored            DraftNote[]          @relation("UserDraftNotes")
  PasswordHistory          PasswordHistory[]
  sessions                 Session[]
}

model CaptainProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  firstName     String
  lastName      String
  displayName   String
  phone         String
  bio           String
  experienceYrs Int       @default(0)
  avatarUrl     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  charters      Charter[]
}

model Charter {
  id            String             @id @default(cuid())
  captainId     String
  charterType   String
  name          String
  state         String
  city          String
  startingPoint String
  postcode      String
  latitude      Decimal?           @db.Decimal(10, 7)
  longitude     Decimal?           @db.Decimal(10, 7)
  description   String
  pricingPlan   CharterPricingPlan @default(BASIC)
  boatId        String?            @unique
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  isActive      Boolean            @default(true)
  backupPhone   String?
  boat          Boat?              @relation(fields: [boatId], references: [id])
  captain       CaptainProfile     @relation(fields: [captainId], references: [id])
  amenities     CharterAmenity[]
  draft         CharterDraft?
  features      CharterFeature[]
  media         CharterMedia[]
  pickup        Pickup?
  policies      Policies?
  trips         Trip[]
}

model Boat {
  id        String   @id @default(cuid())
  name      String
  type      String
  lengthFt  Int
  capacity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  charter   Charter?
}

model Pickup {
  id        String       @id @default(cuid())
  charterId String       @unique
  available Boolean      @default(false)
  fee       Decimal?     @db.Decimal(10, 2)
  notes     String?
  charter   Charter      @relation(fields: [charterId], references: [id])
  areas     PickupArea[]
}

model PickupArea {
  id       String @id @default(cuid())
  pickupId String
  label    String
  pickup   Pickup @relation(fields: [pickupId], references: [id])
}

model Policies {
  id                String  @id @default(cuid())
  charterId         String  @unique
  licenseProvided   Boolean
  catchAndKeep      Boolean
  catchAndRelease   Boolean
  childFriendly     Boolean
  liveBaitProvided  Boolean
  alcoholNotAllowed Boolean
  smokingNotAllowed Boolean
  charter           Charter @relation(fields: [charterId], references: [id])
}

model CharterAmenity {
  id        String  @id @default(cuid())
  charterId String
  label     String
  charter   Charter @relation(fields: [charterId], references: [id])
}

model CharterFeature {
  id        String  @id @default(cuid())
  charterId String
  label     String
  charter   Charter @relation(fields: [charterId], references: [id])
}

model CharterMedia {
  id              String    @id @default(cuid())
  charterId       String
  tripId          String?
  kind            MediaKind
  url             String
  storageKey      String
  mimeType        String?
  sizeBytes       Int?
  width           Int?
  height          Int?
  sortOrder       Int       @default(0)
  createdAt       DateTime  @default(now())
  thumbnailUrl    String?   @map("thumbnail_url")
  durationSeconds Int?      @map("duration_seconds")
  charter         Charter   @relation(fields: [charterId], references: [id])
  trip            Trip?     @relation(fields: [tripId], references: [id])
}

model CharterDraft {
  id            String      @id @default(cuid())
  userId        String
  status        DraftStatus @default(DRAFT)
  currentStep   Int         @default(0)
  formVersion   Int         @default(1)
  data          Json
  version       Int         @default(1)
  charterId     String?     @unique
  lastTouchedAt DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  charter       Charter?    @relation(fields: [charterId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  notes         DraftNote[]

  @@index([lastTouchedAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trip {
  id            String          @id @default(cuid())
  charterId     String
  name          String
  tripType      String
  price         Decimal         @db.Decimal(10, 2)
  durationHours Int
  maxAnglers    Int
  style         CharterStyle
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  promoPrice    Decimal?        @db.Decimal(10, 2)
  media         CharterMedia[]
  charter       Charter         @relation(fields: [charterId], references: [id])
  species       TripSpecies[]
  startTimes    TripStartTime[]
  techniques    TripTechnique[]
}

model TripStartTime {
  id     String @id @default(cuid())
  tripId String
  value  String
  trip   Trip   @relation(fields: [tripId], references: [id])
}

model TripSpecies {
  id     String @id @default(cuid())
  tripId String
  value  String
  trip   Trip   @relation(fields: [tripId], references: [id])
}

model TripTechnique {
  id     String @id @default(cuid())
  tripId String
  value  String
  trip   Trip   @relation(fields: [tripId], references: [id])
}

model CaptainVerification {
  id               String             @id @default(cuid())
  userId           String             @unique
  status           VerificationStatus @default(PENDING)
  idFront          Json?
  idBack           Json?
  captainLicense   Json?
  boatRegistration Json?
  fishingLicense   Json?
  additional       Json               @default("[]")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
}

model DraftNote {
  id        String       @id @default(cuid())
  draftId   String
  authorId  String
  body      String
  createdAt DateTime     @default(now())
  author    User         @relation("UserDraftNotes", fields: [authorId], references: [id])
  draft     CharterDraft @relation(fields: [draftId], references: [id])

  @@index([draftId])
  @@index([authorId])
}

model AuditLog {
  id            String   @id @default(cuid())
  actorUserId   String
  entityType    String
  entityId      String
  action        String
  before        Json?
  after         Json?
  changed       Json?
  correlationId String?
  ip            String?
  userAgent     String?
  createdAt     DateTime @default(now())

  @@index([entityType, entityId, createdAt])
  @@index([actorUserId, createdAt])
}

/// --------------------------------------------------
/// Captain short-form video library (30s trimmed clips)
/// --------------------------------------------------
model CaptainVideo {
  id                   String    @id @default(cuid())
  ownerId              String
  originalUrl          String
  thumbnailUrl         String?
  trimStartSec         Float     @default(0)
  ready720pUrl         String?
  processStatus        String    @default("queued")
  errorMessage         String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  blobKey              String?
  normalizedBlobKey    String?
  thumbnailBlobKey     String?
  didFallback          Boolean   @default(false)
  fallbackReason       String?
  originalDurationSec  Float?
  processedDurationSec Float?
  appliedTrimStartSec  Float?
  processedAt          DateTime?
  originalDeletedAt    DateTime?
  originalWidth        Int?
  originalHeight       Int?
  processedWidth       Int?
  processedHeight      Int?

  @@index([ownerId, processStatus])
  @@index([createdAt])
}

model PasswordHistory {
  id           String   @id
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
}

enum DraftStatus {
  DRAFT
  SUBMITTED
  ABANDONED
  DELETED
}

enum CharterPricingPlan {
  BASIC
  SILVER
  GOLD
}

enum CharterStyle {
  PRIVATE
  SHARED
}

enum MediaKind {
  CHARTER_PHOTO
  CHARTER_VIDEO
  CAPTAIN_AVATAR
  TRIP_MEDIA
}

enum Role {
  CAPTAIN
  STAFF
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MfaMethod {
  TOTP
  WHATSAPP
  SMS
}
